<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Export generator="Cache" version="25">
<Class name="SecurityMirrorSync.Installer">
<Super>%RegisteredObject</Super>

<Property name="SharedPath">
<Description>
Shared Path where security export files are exchanged</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Method name="Run">
<Description>
Run installer
pPath - Shared Path where security export files are exchanged.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPath:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	set retTxt = "OK"
	set obj = ..%New()
	try {
		do obj.Log("SecurityMirrorSync Installer started")
		set obj.SharedPath=pPath
		if $system.Mirror.IsMember() {
			$$$THROWONERROR(tSC, obj.DeleteGlobals())
			$$$THROWONERROR(tSC, obj.Install())
		}else{
			set retTxt = "NOT INSTALLED: The instance is not a Mirror member"
		}
	} catch ex {
		set ret = ex.AsStatus()
		set retTxt = $system.Status.GetOneErrorText(ret)
	}
	do obj.Log("SecurityMirrorSync Installer ended")
	do obj.Log("Status="_retTxt)
	quit ret
]]></Implementation>
</Method>

<Method name="Install">
<Description>
Install files</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		//Check SharedPath
		if ..SharedPath="" $$$ThrowStatus($$$ERROR($$$GeneralError,"SharedPath cannot be empty"))
		
		//Enable Audit
		set system=##class(Security.System).%OpenId("SYSTEM")
		set system.AuditEnabled=1
		do system.%Save()
		do ..Log("Audit Enabled")
		
		//Enable Audit events
		do ..Log("   ...enabling events")
		set event=##class(Security.Events).%OpenId("%system||%security||resourcechange")
		set event.Enabled=1
		do event.%Save()
		do ..Log("%System||%Security||ResourceChange: Enabled")
		
		set event=##class(Security.Events).%OpenId("%system||%security||rolechange")
		set event.Enabled=1
		do event.%Save()
		do ..Log("%System||%Security||RoleChange: Enabled")
		
		set event=##class(Security.Events).%OpenId("%system||%security||userchange")
		set event.Enabled=1
		do event.%Save()
		do ..Log("%System||%Security||UserChange: Enabled")
		
		set event=##class(Security.Events).%OpenId("%system||%security||applicationchange")
		set event.Enabled=1
		do event.%Save()
		do ..Log("%System||%Security||ApplicationChange: Enabled")
		
		set event=##class(Security.Events).%OpenId("%system||%security||sslconfigchange")
		set event.Enabled=1
		do event.%Save()
		do ..Log("%System||%Security||SSLConfigChange: Enabled")
		
		do ..Log("   ...disabling events")
		set event=##class(Security.Events).%OpenId("%system||%security||auditreport")
		set event.Enabled=0
		do event.%Save()
		do ..Log("%System||%Security||AuditReport: Disabled")
		
		set event=##class(Security.Events).%OpenId("%system||%system||configurationchange")
		set event.Enabled=0
		do event.%Save()
		do ..Log("%System||%System||ConfigurationChange: Disabled")

		
		//Create Task
		
		//First, check if exist already a Task with the same name. If so, delete it.
		do ..DeleteTaskByName("SecurityMirrorSync")
		
		do ..Log("   ...creating tasks")
		set task=##class(%SYS.Task).%New()
		set task.Name="SecurityMirrorSync"
		set task.Description="Export/Import security settings in a Mirror configuration"
		set task.NameSpace="%SYS"

		// Schedule 
		set task.DailyFrequencyTime=0 // 0 = minutes
		set task.DailyFrequency=1 // 1 minute
		set task.DailyIncrement=1 // 1 minutes between runs
		set task.DailyStartTime=0 // Time for tasks to start running in $H format($p($h,",",2))
		// Start from now
		set task.StartDate = $p($h,",",1)
		// Run on Any Mirror member regardless of status
		set task.MirrorStatus = 3
		// Task definition
		set task.TaskClass="SecurityMirrorSync.Task"
		set task.Settings=$LB("SharedPath", ..SharedPath)
		do task.%Save()
		
		do ..Log("Task ""SecurityMirrorSync"" scheduled:")
		do ..Log("Start date:"_$zdate(task.StartDate)_", now.")
		do ..Log("Run automatically every "_task.DailyFrequency_" minute")
	
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>

<Method name="DeleteGlobals">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		if $d(^SecurityMirrorSync){
			k ^SecurityMirrorSync
		}
		
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>

<Method name="Uninstall">
<Description>
Uninstalls SecurityMirrorSync.
*WARNING* it actually deletes classes!!</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	set obj = ..%New()
	try {
		do ..Log("Deleting SecurityMirrorSync routines...")
		$$$ThrowOnError(##class(%RoutineMgr).Delete("SecurityMirrorSync.mac"))

		do ..Log("Deleting SecurityMirrorSync classes...")
		$$$ThrowOnError($system.OBJ.DeletePackage("SecurityMirrorSync"))
		
		w !
		do ..Log("Deleting SecurityMirrorSync globals...")
		$$$ThrowOnError(obj.DeleteGlobals())
		
		do ..Log("Deleting SecurityMirrorSync tasks...")
		$$$ThrowOnError(obj.DeleteTaskByName("SecurityMirrorSync"))
		
		do ..Log("SecurityMirrorSync succesfully uninstalled")
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>

<Method name="Log">
<Description>
Log a message
pText - Text message
pTimeStamp - Add a timestamp
pNewLine - Add a new line</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pText:%String,pTimeStamp:%Boolean=1,pNewLine:%Boolean=1</FormalSpec>
<Implementation><![CDATA[
	write $case(pTimeStamp,1:"["_$zdt($h,3)_"] ",:"")_pText_$case(pNewLine,1:$$$NL,:"")
]]></Implementation>
</Method>

<Method name="DeleteTaskByName">
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		//Check if exist already Tasks with the same name. If so, delete them.
		set rs=##class(%ResultSet).%New("%SYS.Task:QuickTaskList")
		do rs.Execute()
		while rs.Next() {
			if rs.Get("Task Name") = name {
				do ##class(%SYS.Task).%DeleteId(rs.Get("ID"))
				do ..Log("Task named "_rs.Get("Task Name")_": deleted")
			}
		}
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>
</Class>

<Class name="SecurityMirrorSync.Task">
<Super>%SYS.Task.Definition</Super>

<Property name="SharedPath">
<Description>
SharedPath references a path accesible to both Mirror failover members.</Description>
<Type>%String</Type>
</Property>

<Parameter name="TaskName">
<Default>SecurityMirrorSync</Default>
</Parameter>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ^SecurityMirrorSync(..SharedPath)
	Quit $$$OK
]]></Implementation>
</Method>
</Class>

<Routine languagemode="0" name="SecurityMirrorSync" type="MAC">
<![CDATA[SecurityMirrorSync(SharedDir)	; Routine to synchronize Security.System information 
	;							; between mirror failover members
	;							; Primary failover member exports security
	;							; Backup failover member imports security
	;							;
	;							; examples:
	;							; do ^SecurityMirrorSync("\\ESM5510ADEPEDRO\MirrorSync")
	;							; do ^SecurityMirrorSync("/home/ensemble/MirrorSync")
	;							;
	;							;
	;							; Checks the Audit DB for events on new security settings changes
	do Start(SharedDir)
	quit
	//
Start(SharedDir)
	s SharedDir = ##class(%File).NormalizeDirectory(SharedDir)
	
	d ##class(SYS.Mirror).GetFailoverMemberStatus(.ThisMember, .OtherMember)
	
	/********************************
	Primary failover member execution
	********************************/
	if $lg(ThisMember,3) = "Primary" {
		
		// Check if there are still export files from previous Primary failover member
		// In that case, first import all these before starting exporting again
		// wildcard to search for export files
		s wc = SharedDir_"SecurityMirrorSync#"_$tr($lg(OtherMember,1),"/","_")_"*"

		// Get ordered list of files by #number#
		do ListFiles(SharedDir,wc,.fileslist)
		
		if $d(fileslist) {
			// Import all available security export files
			s st = $$ImportAllFiles(.fileslist)
		}
		
		// Check for new Audit records
		if $d(^SecurityMirrorSync($lg(ThisMember,1),"TimeAuditLastCheck")) {
			
			s timetostartfrom=^SecurityMirrorSync($lg(ThisMember,1),"TimeAuditLastCheck")
			
			// Set the current datetime to the global at end of process. Ensure to not save to global in case of error in process
			s timeChecked = $zdatetime($h,3)
			
			// Initialize variables
			set flags = 0
			set nSQLPrivileges = 0
			set sExport = "export"
			
			//List AuditDatabase since last list check
			set rs=##class(%ResultSet).%New("%SYS.Audit:List")
			do rs.Execute(timetostartfrom,,"%System","%Security","ResourceChange,RoleChange,"_
				"UserChange,ApplicationChange,SSLConfigChange" )

			// go over the new Audit rows (if there are new)
			while rs.Next() {
				set SystemID=rs.Get("SystemID")
				set AuditIndex=rs.Get("AuditIndex")
				set UTCTimeStamp=rs.Get("UTCTimeStamp")
				do ##class(%SYS.Audit).Get(UTCTimeStamp,SystemID,AuditIndex,.Properties)
				// check if the description starts with "export". In that case do nothing: This entry should be from our last export
				// this only works with local installation languages where the description starts with "Export". Works with english and spanish
				// change the sExport var to the appropiate translation of "export" to the desired language.
				if '($find($zconvert(Properties("Description"),"L"), sExport) = ($l(sExport)+1)) {
					set num = $case(Properties("Event"), "ResourceChange":2**4, "RoleChange":2**5, 
					"UserChange":2**6, "ApplicationChange":2**7, "SSLConfigChange":2**8,:0)
					s flags = flags + num
				}
			}
			// Check the number of SQLPrivileges in the System:
			set nSQLPrivileges = $$GetSQLPrivileges()
			
			if $d(^SecurityMirrorSync($lg(ThisMember,1),"nSQLPrivileges")) {
				// Check if the number of SQLPrivileges differ from the number from last Check: 
				if '(nSQLPrivileges = ^SecurityMirrorSync($lg(ThisMember,1),"nSQLPrivileges")) {
					s flags = flags + (2**12)
				}
			}
			//Export if there are new Security items to export.
			if flags > 0 {
				// wildcard to search for export files
				s wc = "SecurityMirrorSync#"_$tr($lg(ThisMember,1),"/","_")_"*"
				
				// Get ordered list of files by #number#
				do ListFiles(SharedDir,wc,.fileslist)
				
				if $d(fileslist) {
					// Get the file with highest #number#
					s key=$order(fileslist(""),-1)
					s key = key+1
					s file = "SecurityMirrorSync#"_$tr($lg(ThisMember,1),"/","_")_"#"_key_"#.xml"
				}else{
					s file = "SecurityMirrorSync#"_$tr($lg(ThisMember,1),"/","_")_"#1#.xml"
				}
				
				// Export the security
				s st = $$ExportSecurity(SharedDir_"~"_file,flags)
				if st { do ##class(%File).Rename(SharedDir_"~"_file,SharedDir_file) }
			}
		}else{
			// First time execution actions
			
			// Remove export files (if there are any)
			s wc = SharedDir_"SecurityMirrorSync#*"
			set st = ##class(%File).ComplexDelete(wc)
			
			// Check the number of SQLPrivileges in the System for first time:
			set nSQLPrivileges = $$GetSQLPrivileges()
			
			// Set the current datetime to the global at end of process. Ensure to not save to global in case of error in process
			s timeChecked = $zdatetime($h,3)
			
			//Export for the first time
			s file = "SecurityMirrorSync#"_$tr($lg(ThisMember,1),"/","_")_"#1#.xml"
			s st = $$ExportSecurity(SharedDir_"~"_file,(2**4)+(2**5)+(2**6)+(2**7)+(2**8)+(2**12))
			if st { do ##class(%File).Rename(SharedDir_"~"_file,SharedDir_file) }
		}
		
		// Set the current datetime to the global
		s ^SecurityMirrorSync($lg(ThisMember,1),"TimeAuditLastCheck") = $g(timeChecked,0)
		
		// Set the current number of SQLPrivileges to the global
		s ^SecurityMirrorSync($lg(ThisMember,1),"nSQLPrivileges") = $g(nSQLPrivileges,0)
		
		
	/********************************
	Backup failover member execution
	********************************/
	}elseif $lg(ThisMember,3) = "Backup" {
		// wildcard to search for export files
		s wc = "SecurityMirrorSync#"_$tr($lg(OtherMember,1),"/","_")_"*"

		// Get ordered list of files by #number#
		do ListFiles(SharedDir,wc,.fileslist)
		
		if $d(fileslist) {
			// Import all available security export files
			set st = $$ImportAllFiles(.fileslist)
		}
	}
	
	// remove vars not used anymore
	k SharedDir,ThisMember,OtherMember,wc,fileslist,timetostartfrom,flags,nSQLPrivileges,sExport,rs
	k SystemID,AuditIndex,UTCTimeStamp,Properties,num,key,st,file,timeChecked
	
	quit
	
ExportSecurity(file, flags) PUBLIC
	; Export in Windows system CachÃ© Terminal:
	; w $$ExportSecurity^SecurityMirrorSync("\\ESM5510ADEPEDRO\MirrorSync\ESM5510ADEPEDRO_E2017.xml")
	; Export in POSIX system CachÃ© Terminal: 
	; (assuming \\ESM5510ADEPEDRO\MirrorSync is mounted in: /home/ensemble/MirrorSync)
	; w $$ExportSecurity^SecurityMirrorSync("/home/ensemble/MirrorSync/LOCALHOST.CENTOS3_ENSEMBLE.xml")
	
	;Only export the following:
	//s flags = (2**4) + (2**5) + (2**6) + (2**7) + (2**8) + (2**9) + (2**10) + (2**11) + (2**12)
	;Bit 4 - Resources,	Bit 5 - Roles,	Bit 6 - Users,	
	;Bit 7 - Applications,	Bit 8 - SSL Configs,	Bit 9 - PhoneProvider
	;Bit 10 - X509Credential,	Bit 11 - OpenAMIdentityService,		Bit 12 - SQL privileges
	s st = ##class(Security.System).ExportAll(file,,flags)
	quit st

ImportSecurity(file) PUBLIC
	; Import in Windows system CachÃ© Terminal:
	; w $$ImportSecurity^SecurityMirrorSync("\\ESM5510ADEPEDRO\MirrorSync\LOCALHOST.CENTOS3_ENSEMBLE.xml")
	; Import in POSIX system CachÃ© Terminal: 
	; (assuming \\ESM5510ADEPEDRO\MirrorSync is mounted in: /home/ensemble/MirrorSync)
	; w $$ImportSecurity^SecurityMirrorSync("/home/ensemble/MirrorSync/ESM5510ADEPEDRO_E2017.xml")
	
	;Only import the following:
	s flags = (2**4) + (2**5) + (2**6) + (2**7) + (2**8) + (2**9) + (2**10) + (2**11) + (2**12)
	;Bit 4 - Resources,	Bit 5 - Roles,	Bit 6 - Users,	
	;Bit 7 - Applications,	Bit 8 - SSL Configs,	Bit 9 - PhoneProvider
	;Bit 10 - X509Credential,	Bit 11 - OpenAMIdentityService,		Bit 12 - SQL privileges
	s st = ##class(Security.System).ImportAll(file,,,flags)
	k flags
	quit st
	
ListFiles(dir,wildcard,list)
	set rsFiles=##class(%ResultSet).%New("%File:FileSet")
	do rsFiles.Execute(dir,wildcard)

	// go over the list of files
	while rsFiles.Next() {
		s name = rsFiles.Get("Name")
		s i = $p(name,"#",3)
		s list(i) = name
	}
	k i, name, rsFiles
	quit
	
GetSQLPrivileges()
	// Check the number of SQLPrivileges in the System:
	set stSQLPriv = ##class(%SQL.Statement).%ExecDirect(.tStatement,"SELECT count(*) as iCount FROM Security.SQLPrivileges")
	do stSQLPriv.%Next()
	quit stSQLPriv.%Get("iCount")
	
ImportAllFiles(list)
	// Go through the list
	s key=$order(list(""))
    while (key'="") {
		s file = list(key)
		
		// Import security file 
		s st = $$ImportSecurity(file)
		s ^SecurityMirrorSync($lg(ThisMember,1),"ImportsCount") = $g(^SecurityMirrorSync($lg(ThisMember,1),"ImportsCount"),0) +1
		
		// Delete succesfully imported file
		s st = ##class(%File).Delete(file)
		
		// Get next subscript 
		s key = $order(list(key))
	}
	k wc, key, list, file
	quit st
]]></Routine>
</Export>
